{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "## You are using the Python ARM Radar Toolkit (Py-ART), an open source\n",
      "## library for working with weather radar data. Py-ART is partly\n",
      "## supported by the U.S. Department of Energy as part of the Atmospheric\n",
      "## Radiation Measurement (ARM) Climate Research Facility, an Office of\n",
      "## Science user facility.\n",
      "##\n",
      "## If you use this software to prepare a publication, please cite:\n",
      "##\n",
      "##     JJ Helmus and SM Collis, JORS 2016, doi: 10.5334/jors.119\n",
      "\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "# load the lib\n",
    "import os\n",
    "os.environ['PROJ_LIB'] = '/home/ylk/anaconda3/share/proj'\n",
    "import pyart\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "matplotlib.rcParams['figure.figsize'] = [35.0, 35.0]\n",
    "import numpy as np\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "N0H = pyart.io.read('/home/ylk/data/test_nexrad/processed/KOUN_SDUS84_N0HVNX_201801011620')\n",
    "display = pyart.graph.RadarMapDisplay(N0H)\n",
    "x = N0H.fields['radar_echo_classification']['data']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = np.zeros_like(x)\n",
    "m[:,120:]=1\n",
    "y = np.ma.masked_array(x, m)\n",
    "N0H.fields['radar_echo_classification']['data'] = y\n",
    "\n",
    "fig = plt.figure(figsize=(6, 5))\n",
    "\n",
    "# plot super resolution reflectivity\n",
    "ax = fig.add_subplot(111)\n",
    "display.plot('radar_echo_classification', 0, title='radar_echo_classification',\n",
    "             colorbar_label='', ax=ax)\n",
    "display.set_limits(xlim=(-40, 40), ylim=(-40, 40), ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = np.zeros_like(x)\n",
    "m[:,120:]=1\n",
    "y = np.ma.masked_array(x, m)\n",
    "y[:60,:120] = 3.3\n",
    "y[60:120,:120] = 5.6\n",
    "y[120:180,:120] = 2.1\n",
    "y[180:240,:60] = 8\n",
    "N0H.fields['radar_echo_classification']['data'] = y\n",
    "\n",
    "fig = plt.figure(figsize=(6, 5))\n",
    "\n",
    "# plot super resolution reflectivity\n",
    "ax = fig.add_subplot(111)\n",
    "display.plot('radar_echo_classification', 0, title='Test',\n",
    "             colorbar_label='', ax=ax)\n",
    "display.set_limits(xlim=(-40, 40), ylim=(-40, 40), ax=ax)\n",
    "plt.show();\n",
    "\n",
    "fig.savefig(\"test.png\", bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "cnt = {\n",
    "    0 : 0, # Below Threshold (ND)\n",
    "    10 : 0, # Biological (BI)\n",
    "    20 : 0, # Anomalous Propagation/Group Clutter (GC)\n",
    "    30 : 0, # Ice Crystals (IC)\n",
    "    40 : 0, # Dry Snow (DS)\n",
    "    50 : 0, # Wet Snow (WS)\n",
    "    60 : 0, # Light and/or Moderate Rain (RA)\n",
    "    70 : 0, # Heavy Rain (HR)\n",
    "    80 : 0, # Big Drops (rain) (BD)\n",
    "    90 : 0, # Graupel (GR)\n",
    "    100 : 0, # Hail, possibly with rain (HA)\n",
    "    140 : 0, # Unknown Classification (UK)\n",
    "    150 : 0 # Range Folded (RH)\n",
    "}\n",
    "\n",
    "def adjust_fhc_colorbar_for_pyart(cb):\n",
    "    cb.set_ticks(np.arange(10, 109, 10))\n",
    "    cb.ax.set_yticklabels(['BI', 'GC', 'IC',\n",
    "                           'DS', 'WS', 'RA', 'HR', 'BD',\n",
    "                           'GR', 'HA'])\n",
    "    cb.ax.set_ylabel('')\n",
    "    cb.ax.tick_params(length=0)\n",
    "    return cb\n",
    "\n",
    "m = np.zeros_like(x)\n",
    "m[:,120:]=1\n",
    "y = np.ma.masked_array(x, m)\n",
    "N0H.fields['radar_echo_classification']['data'] = y\n",
    "\n",
    "fig = plt.figure(figsize=(6, 5))\n",
    "\n",
    "# plot super resolution reflectivity\n",
    "ax = fig.add_subplot(111)\n",
    "display.plot('radar_echo_classification', 0, title='radar_echo_classification',\n",
    "             colorbar_label='', ax=ax)\n",
    "display.set_limits(xlim=(-40, 40), ylim=(-40, 40), ax=ax)\n",
    "display.cbs[1] = adjust_fhc_colorbar_for_pyart(display.cbs[1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-856bd287fc92>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     27\u001b[0m              colorbar_label='', ax=ax)\n\u001b[1;32m     28\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_limits\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxlim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m40\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mylim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m40\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m40\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcbs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0madjust_fhc_colorbar_for_pyart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcbs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m;\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "N0C = pyart.io.read('/home/ylk/data/test_nexrad/processed/KOUN_SDUS84_N0CVNX_201801011620')\n",
    "display = pyart.graph.RadarMapDisplay(N0C)\n",
    "x = N0C.fields['cross_correlation_ratio']['data']\n",
    "\n",
    "def adjust_fhc_colorbar_for_pyart(cb):\n",
    "    cb.set_ticks(np.arange(0, 1.1, 0.2))\n",
    "    cb.ax.set_yticklabels(['BI', '1', '2', '3', '4', 'GC'])\n",
    "    cb.ax.set_ylabel('')\n",
    "    cb.ax.tick_params(length=0)\n",
    "    return cb\n",
    "\n",
    "m = np.zeros_like(x)\n",
    "m[:,120:]=1\n",
    "y = np.ma.masked_array(x, m)\n",
    "y[:,:120]=0.5\n",
    "y[:60,:120] = 0\n",
    "y[60:120,:120] = 1\n",
    "y[120:180,:120] = 0\n",
    "y[180:240,:60] = 0\n",
    "N0C.fields['cross_correlation_ratio']['data'] = y\n",
    "\n",
    "fig = plt.figure(figsize=(6, 5))\n",
    "\n",
    "# plot super resolution reflectivity\n",
    "ax = fig.add_subplot(111)\n",
    "display.plot('cross_correlation_ratio', 0, title='Test',\n",
    "             colorbar_label='', ax=ax)\n",
    "display.set_limits(xlim=(-40, 40), ylim=(-40, 40), ax=ax)\n",
    "display.cbs[1] = adjust_fhc_colorbar_for_pyart(display.cbs[1])\n",
    "plt.show();\n",
    "\n",
    "fig.savefig(\"test.png\", bbox_inches='tight')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.arange(0, 1.1, 0.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
